
app {

  http {
    protocol = http
    domain = "localhost:30357"  //dev
    host = localhost    //local
    interface = "0.0.0.0"
    port = 30330
  }

}

slick.db {
//  url = "jdbc:postgresql://10.1.29.247:5432/todos2018"
//  url = "jdbc:postgresql://localhost:5432/todos2018"
//  url = "jdbc:postgresql://10.1.29.250:5432/todos2018"
//  url = "jdbc:postgresql://localhost:5432/todos2018"
  url = "jdbc:mysql://cdb-8xs0z9la.cd.tencentcdb.com:10007/hjzy?characterEncoding=utf-8&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true"
  user = "root"
  password = "wqf007wqf@"
  maximumPoolSize = 10
  connectTimeout = 30000
  idleTimeout = 300000
  maxLifetime = 900000
}



session {

  cookie {
    name = "todos2018_Session"
    domain = none
    path = "/"
    secure = false
    httpOnly = true
    maxAge = 1 days
  }
  encryptData = false
  serverSecret = "r^20M0;[d4sK3y2*mdg-aj53Ke2lmOd4do3Dymc3g8n23;rl4;zt3;0gfdyrewr3lrt+LGfhf9"

  sessionTimeOut=24  //hour

}

mail.conf {
  EMAIL_ADDRESS = "flowservice@neotel.com.cn"
  EMAIL_PASSWORD = "SKld1234!@#$"
  //  EMAIL_PASSWORD = "aaa123
  //  SMTPHOST = "smtp.exmail.qq.com"
  SMTPHOST = "smtp.exmail.qq.com"
  SMTPPORT = "25"
  //  IMAP_SERVER = "imap.exmail.qq.com"
  IMAP_SERVER = "imap.163.com"
  IMAP_PROTOCOL = "imap"
}


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  actor {

    my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # value, if it is defined. Then the other pool-size properties will not
        # be used.
        #
        # Valid values are: `off` or a positive integer.
        fixed-pool-size = off

        # Min number of threads to cap factor-based corePoolSize number to
        core-pool-size-min = 16

        # The core-pool-size-factor is used to determine corePoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 100.0

        # Max number of threads to cap factor-based corePoolSize number to
        core-pool-size-max = 256

        # Minimum number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-min = 16

        # The max-pool-size-factor is used to determine maximumPoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor)
        # The maximumPoolSize will not be less than corePoolSize.
        # It is only used if using a bounded task queue.
        max-pool-size-factor = 100.0

        # Max number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-max = 256

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      throughput = 100
    }

  }

  http{
    parsing{
      max-content-length = 2g
    }
  }



}


